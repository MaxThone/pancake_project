<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="f5c9f2b6-a3a5-4a26-919a-873e03779fea" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/doc/intro.md" beforeDir="false" afterPath="$PROJECT_DIR$/doc/intro.md" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/input_files/large_output.txt" beforeDir="false" afterPath="$PROJECT_DIR$/input_files/large_output.txt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test_project/blabla.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/test_project/blabla.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/test_project/blabla.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="311">
              <caret line="24" column="73" selection-start-line="24" selection-start-column="73" selection-end-line="24" selection-end-column="73" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/doc/intro.md">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="90">
              <caret line="6" column="7" selection-start-line="6" selection-start-column="7" selection-end-line="6" selection-end-column="7" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/input_files/large_output.txt">
          <provider selected="true" editor-type-id="text-editor">
            <state>
              <caret lean-forward="true" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/input_files/output.txt">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1500">
              <caret line="100" selection-start-line="100" selection-end-line="100" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/input_files/A-small-practice.in">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-939" />
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/test_project/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="30">
              <caret line="2" selection-start-line="2" selection-end-line="7" selection-end-column="7" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>flipping_pancakes</find>
    </findStrings>
    <replaceStrings>
      <replace>new_flipping_pancakes</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/clj_test_scripts/blabla.clj" />
        <option value="$PROJECT_DIR$/src/test_project/clj_test_scripts/blabla.clj" />
        <option value="$PROJECT_DIR$/src/test_project/core.clj" />
        <option value="$PROJECT_DIR$/doc/intro.md" />
        <option value="$PROJECT_DIR$/src/test_project/blabla.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="y" value="22" />
    <option name="width" value="1440" />
    <option name="height" value="878" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="test_project" type="b2602c69:ProjectViewProjectNode" />
              <item name="test_project" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="test_project" type="b2602c69:ProjectViewProjectNode" />
              <item name="test_project" type="462c0819:PsiDirectoryNode" />
              <item name="doc" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="test_project" type="b2602c69:ProjectViewProjectNode" />
              <item name="test_project" type="462c0819:PsiDirectoryNode" />
              <item name="input_files" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1553433676476" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/test_project" />
    </key>
  </component>
  <component name="ReplState" timestamp="1553201045790">{:repl-history {:ide [], :local [{:command &quot;(def F 2)\n(def P \&quot;+-+++--\&quot;)\n(println (flippin_pancakes P F 0))&quot;, :offset 62, :ns &quot;user&quot;} {:command &quot;      (println idx)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(defn flipping_pancakes\n  [P F flips]\n  (let [\n        p_array (vec P)\n        idx (get_minus_index p_array)\n        ]\n  (if (AllPlus? (p_array))\n    (println flips)\n    (if (&gt; (+ idx F) (count p_array))\n      (flipping_pancakes (one_pancake_flip P F) F (inc flips))))))\n\n\n(def F 2)\n(def P \&quot;+-+++--\&quot;)\n(println (flippin_pancakes P F 0))&quot;, :offset 335, :ns &quot;user&quot;} {:command &quot;(defn flipping_pancakes\n  [P F flips]\n  (let [\n        p_array (vec P)\n        idx (get_minus_index p_array)\n        ]\n  (if (AllPlus? (p_array))\n    (println flips)\n    (if (&gt; (+ idx F) (count p_array))\n      (flipping_pancakes (one_pancake_flip P F) F (inc flips))))))&quot;, :offset 270, :ns &quot;user&quot;} {:command &quot;(defn flipping_pancakes\n  [P F flips]\n  (let [\n        p_array (vec P)\n        idx (get_minus_index p_array)\n        ]\n  (if (AllPlus? (p_array))\n    (println flips)\n    (if (&gt; (+ idx F) (count p_array))\n      (println \&quot;IMPOSSIBLE\&quot;)\n      (flipping_pancakes (one_pancake_flip P F) F (inc flips))))))&quot;, :offset 299, :ns &quot;user&quot;} {:command &quot;(defn flipping_pancakes\n  [P F flips]\n  (let [\n        p_array (vec P)\n        idx (get_minus_index p_array)\n        ]\n  (if (AllPlus? p_array)\n    (println flips)\n    (if (&gt; (+ idx F) (count p_array))\n      (println \&quot;IMPOSSIBLE\&quot;)\n      (flipping_pancakes (one_pancake_flip P F) F (inc flips))))))&quot;, :offset 297, :ns &quot;user&quot;} {:command &quot;(def F 2)\n(def P \&quot;+-+++--\&quot;)\n(println (flipping_pancakes P F 0))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;(def F 2)\n(def P \&quot;--+++--\&quot;)\n(println (flipping_pancakes P F 0))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;(defn flipping_pancakes\n  [P F flips]\n  (let [\n        p_array (vec P)\n        idx (get_minus_index p_array)\n        ]\n    (println p_array)\n  (if (AllPlus? p_array)\n    (println flips)\n    (if (&gt; (+ idx F) (count p_array))\n      (println \&quot;IMPOSSIBLE\&quot;)\n      (flipping_pancakes (one_pancake_flip P F) F (inc flips))))))&quot;, :offset 319, :ns &quot;user&quot;} {:command &quot;(defn flipping_pancakes\n  [P F flips]\n  (let [\n        p_array (vec P)\n        idx (get_minus_index p_array)\n        ]\n    (println p_array)\n  (if (AllPlus? p_array)\n    (println flips)\n    (if (&gt; (+ idx F) (count p_array))\n      (println \&quot;IMPOSSIBLE\&quot;)\n      (flipping_pancakes (one_pancake_flip P F) F (inc flips))))))\n\n\n(def F 2)\n(def P \&quot;--+++--\&quot;)\n(println (flipping_pancakes P F 0))&quot;, :offset 385, :ns &quot;user&quot;} {:command &quot;(def F 2)\n(def P \&quot;+-+++--+-\&quot;)\n(println (flipping_pancakes P F 0))&quot;, :offset 65, :ns &quot;user&quot;} {:command &quot;(println (.indexOf [1 2 3 4 5 1] 9))&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(require '[clojure.java.io :as io])&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(sample)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(slurp \&quot;input_files/A-small-practice.in\&quot;)&quot;, :offset 41, :ns &quot;user&quot;} {:command &quot;(def p \n  (slurp \&quot;input_files/A-small-practice.in\&quot;))&quot;, :offset 52, :ns &quot;user&quot;} {:command &quot;(println p)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(defn Example []\n  (with-open [rdr (clojure.java.io/reader \&quot;Example.txt\&quot;)]\n    (reduce conj [] (line-seq rdr))))\n(Example)&quot;, :offset 122, :ns &quot;user&quot;} {:command &quot;(defn Example []\n  (with-open [rdr (clojure.java.io/reader \&quot;input_failes/A-small-practice.in\&quot;)]\n    (reduce conj [] (line-seq rdr))))\n(Example)&quot;, :offset 143, :ns &quot;user&quot;} {:command &quot;(Example)&quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(defn Example []\n  (with-open [rdr (clojure.java.io/reader \&quot;input_files/A-small-practice.in\&quot;)]\n    (reduce conj [] (line-seq rdr))))\n(Example)&quot;, :offset 142, :ns &quot;user&quot;} {:command &quot;(map split input_vector \&quot; \&quot;)&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(split \&quot;lol does this work\&quot; \&quot; \&quot;)&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(require '[clojure.string :as str])&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(str/split \&quot;lol does this work\&quot; \&quot; \&quot;)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(str/split \&quot;lol does this work\&quot; #\&quot; \&quot;)&quot;, :offset 37, :ns &quot;user&quot;} {:command &quot;(def input_vector (subvec (Example) ))&quot;, :offset 38, :ns &quot;user&quot;} {:command &quot;(def input_vector (Example))&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(def input_vector (subvec (Example) 1))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(println input_vector)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(println (head input_vector))&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(type input_vector)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(subvec input_vector 0 1)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(subvec input_vector 0 2)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(map str/split input_vector \&quot; \&quot;)&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(defn split_by_space\n  [string_unit]\n  (str/split string_unit #\&quot; \&quot;))&quot;, :offset 68, :ns &quot;user&quot;} {:command &quot;(def split_vector (map split_by_space input_vector))&quot;, :offset 52, :ns &quot;user&quot;} {:command &quot;(println split_vector)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(require pprint\n         )&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(pprint \&quot; asdf\&quot; \n        )&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(pprint split_vector)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(Integer \&quot;45\&quot;)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(Integer. \&quot;45\&quot;)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(defn solver [P F] (flipping_pancakes P F 0))&quot;, :offset 45, :ns &quot;user&quot;} {:command &quot;(map solver split_vector)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(def output_vector (map solver split_vector))&quot;, :offset 45, :ns &quot;user&quot;} {:command &quot;(spit \&quot;output.txt\&quot; output_vector)&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(def num_vector (range 1 count(input_vector)))&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(def num_vector (range 1 (count input_vector)))&quot;, :offset 47, :ns &quot;user&quot;} {:command &quot;(def num_vector (range 1 ( + (count input_vector) 1)))&quot;, :offset 54, :ns &quot;user&quot;} {:command &quot;(pprint num_vector)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(pprint output_vector)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(map str num_vector output_vector)&quot;, :offset 34, :ns &quot;user&quot;} {:command &quot;(map str num_vector \&quot; \&quot; output_vector)&quot;, :offset 38, :ns &quot;user&quot;} {:command &quot;(concat \&quot;lol\&quot; num_vector)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(map str \&quot;lol\&quot; num_vector)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(map (constantly \&quot;case\&quot;) num_vector)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(map str (constantly \&quot;case\&quot;) num_vector output_vector)&quot;, :offset 54, :ns &quot;user&quot;} {:command &quot;(map str (constantly \&quot;case\&quot;) num_vector)&quot;, :offset 40, :ns &quot;user&quot;} {:command &quot;num_vector&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(def constantly_case (constantly \&quot;case\&quot;))&quot;, :offset 41, :ns &quot;user&quot;} {:command &quot;(pprint constantly_case)&quot;, :offset 24, :ns &quot;user&quot;} {:command &quot;(map str (repeat (count input_vector) \&quot;case\&quot;) num_vector)&quot;, :offset 57, :ns &quot;user&quot;} {:command &quot;(map str (repeat (count input_vector) \&quot;case \&quot;) num_vector)&quot;, :offset 58, :ns &quot;user&quot;} {:command &quot;(map str\n     (repeat (count input_vector) \&quot;case #\&quot;)\n     num_vector\n     (repeat (count input_vector) \&quot; \&quot;)\n     output_vector)&quot;, :offset 127, :ns &quot;user&quot;} {:command &quot;(map str\n     (repeat (count input_vector) \&quot;case #\&quot;)\n     num_vector\n     (repeat (count input_vector) \&quot;: \&quot;)\n     output_vector)&quot;, :offset 128, :ns &quot;user&quot;} {:command &quot;(defn read_per_line [file_path]\n  (with-open [rdr (clojure.java.io/reader file_path)]\n    (reduce conj [] (line-seq rdr))))\n\n(defn write_per_line[file_path,data]\n  (with-open [w (clojure.java.io/writer file_path :append true)]\n    (.write w (data))\n    ))&quot;, :offset 255, :ns &quot;user&quot;} {:command &quot;(def input_vector (subvec (read_per_line \&quot;input_files/A-small-practice.in\&quot;) 1))&quot;, :offset 79, :ns &quot;user&quot;} {:command &quot;(map str \n     (repeat (count input_vector) \&quot;case #\&quot;) \n     (range 1 ( + (count input_vector) 1)) \n     (repeat (count input_vector) \&quot;: \&quot;) \n     output_vector)&quot;, :offset 159, :ns &quot;user&quot;} {:command &quot;(def output_data (map str\n                      (repeat (count input_vector) \&quot;case #\&quot;) \n                      (range 1 ( + (count input_vector) 1)) \n                      (repeat (count input_vector) \&quot;: \&quot;)\n                      (output_vector)\n                      ))&quot;, :offset 268, :ns &quot;user&quot;} {:command &quot;(def output_data (map str\n                      (repeat (count input_vector) \&quot;case #\&quot;) \n                      (range 1 ( + (count input_vector) 1)) \n                      (repeat (count input_vector) \&quot;: \&quot;)\n                      output_vector\n                      ))&quot;, :offset 266, :ns &quot;user&quot;} {:command &quot;(write_per_line \&quot;input_files/output.txt\&quot; output_data)&quot;, :offset 53, :ns &quot;user&quot;} {:command &quot;(doc doseq)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(doseq [x output_data] (pprint x))&quot;, :offset 34, :ns &quot;user&quot;} {:command &quot;(map pprint output_data)&quot;, :offset 24, :ns &quot;user&quot;} {:command &quot;(write_lines \&quot;input_files/output.txt\&quot; )&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(defn write_lines [filename data]\n  (with-open [wrt (clojure.java.io/writer filename)]\n    (doseq [x data]\n      (.write wrt x))))&quot;, :offset 130, :ns &quot;user&quot;} {:command &quot;(write_lines \&quot;input_files/output.txt\&quot; output_data)&quot;, :offset 50, :ns &quot;user&quot;} {:command &quot;(defn write_lines [filename data]\n  (with-open [wrt (clojure.java.io/writer filename)]\n    (doseq [x data]\n      (.write wrt (str x \&quot;\\n\&quot;)))))\n\n(write_lines \&quot;input_files/output.txt\&quot; output_data)&quot;, :offset 193, :ns &quot;user&quot;} {:command &quot;(def input_vector (subvec (read_per_line \&quot;input_files/A-large-practice.in\&quot;) 1))&quot;, :offset 79, :ns &quot;user&quot;} {:command &quot;(defn split_by_space\n  [string_unit]\n  (str/split string_unit #\&quot; \&quot;))\n\n(def split_vector (map split_by_space input_vector))\n\n(def output_vector (map solver split_vector))\n\n\n(def output_data (map str\n                      (repeat (count input_vector) \&quot;case #\&quot;)\n                      (range 1 ( + (count input_vector) 1))\n                      (repeat (count input_vector) \&quot;: \&quot;)\n                      output_vector\n                      ))\n\n(defn write_lines [filename data]\n  (with-open [wrt (clojure.java.io/writer filename)]\n    (doseq [x data]\n      (.write wrt (str x \&quot;\\n\&quot;)))))\n\n(write_lines \&quot;input_files/large_output.txt\&quot; output_data)&quot;, :offset 637, :ns &quot;user&quot;} {:command &quot;(defn split_by_space\n  [string_unit]\n  (str/split string_unit #\&quot; \&quot;))\n\n(def split_vector (map split_by_space input_vector))\n\n(def output_vector (map solver split_vector))\n\n\n(def output_data (map str\n                      (repeat (count input_vector) \&quot;case #\&quot;)\n                      (range 1 ( + (count input_vector) 1))\n                      (repeat (count input_vector) \&quot;: \&quot;)\n                      output_vector\n                      ))&quot;, :offset 436, :ns &quot;user&quot;} {:command &quot;(defn write_lines [filename data]\n  (with-open [wrt (clojure.java.io/writer filename)]\n    (doseq [x data]\n      (.write wrt (str x \&quot;\\n\&quot;)))))\n\n(write_lines \&quot;input_files/large_output.txt\&quot; output_data)&quot;, :offset 199, :ns &quot;user&quot;} {:command &quot;(def input_vector (map split_by_space (subvec (read_per_line \&quot;input_files/A-large-practice.in\&quot;) 1)))&quot;, :offset 100, :ns &quot;user&quot;} {:command &quot;output_data&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(defn one_pancake_flip\n  [P F idx]\n  (let [flip (fn [x] (if (= \\- x) \\+ \\-))\n        batch_array (subvec P idx (+ idx F))\n        flip_array (vec (map flip batch_array))]\n    (replace_array P flip_array idx)))\n\n(def P_test (vec \&quot;-+--\&quot;))\n(def F_test 1)\n(def idx 0)\n(def p_output (one_pancake_flip P_test F_test idx))\n(pprint p_output)&quot;, :offset 333, :ns &quot;user&quot;} {:command &quot;(defn one_pancake_flip\n  [P F idx]\n  (let [flip (fn [x] (if (= \\- x) \\+ \\-))\n        batch_array (subvec P idx (+ idx F))\n        flip_array (vec (map flip batch_array))]\n    (pprint flip_array)\n    (replace_array P flip_array idx)))\n\n(def P_test (vec \&quot;-+--\&quot;))\n(def F_test 1)\n(def idx 0)\n(def p_output (one_pancake_flip P_test F_test idx))\n(pprint p_output)&quot;, :offset 357, :ns &quot;user&quot;} {:command &quot;(defn one_pancake_flip\n  [P F idx]\n  (let [flip (fn [x] (if (= \\- x) \\+ \\-))\n        batch_array (subvec P idx (+ idx F))\n        flip_array (vec (map flip batch_array))]\n    (pprint flip_array)\n    (replace_array P flip_array idx)))\n\n(def P_test (vec \&quot;-+--\&quot;))\n(def F_test 2)\n(def idx 0)\n(def p_output (one_pancake_flip P_test F_test idx))\n(pprint p_output)&quot;, :offset 357, :ns &quot;user&quot;} {:command &quot;(defn one_pancake_flip\n  [P F idx]\n  (let [flip (fn [x] (if (= \\- x) \\+ \\-))\n        batch_array (subvec P idx (+ idx F))\n        flip_array (vec (map flip batch_array))]\n    (pprint flip_array)\n    (replace_array P flip_array idx)))\n\n(def P_test (vec \&quot;-+--\&quot;))\n(def F_test 2)\n(def idx 0)\n(def p_output (one_pancake_flip P_test F_test idx))&quot;, :offset 339, :ns &quot;user&quot;} {:command &quot;(defn one_pancake_flip\n  [P F idx]\n  (let [flip (fn [x] (if (= \\- x) \\+ \\-))\n        batch_array (subvec P idx (+ idx F))\n        flip_array (vec (map flip batch_array))]\n    (pprint flip_array)\n    (replace_array P flip_array idx)))&quot;, :offset 233, :ns &quot;user&quot;} {:command &quot;(def P_test (vec \&quot;-+--\&quot;))\n(def F_test 2)\n(def idx 0)\n(def p_output (one_pancake_flip P_test F_test idx))&quot;, :offset 104, :ns &quot;user&quot;} {:command &quot;(defn replace_array\n  [p_array flip_array idx]\n  (if (= (count flip_array) 0)\n    ;; Flip array is empty, so no need to do anything:\n    p_array\n    ;; Flip array contains elements we want to sub:\n    (replace_array (assoc p_array idx (get flip_array 0))\n                   (subvec flip_array 1)\n                   (+ idx 1))))\n\n(defn one_pancake_flip\n  [P F idx]\n  (let [flip (fn [x] (if (= \\- x) \\+ \\-))\n        batch_array (subvec P idx (+ idx F))\n        flip_array (vec (map flip batch_array))]\n    (pprint flip_array)\n    (replace_array P flip_array idx)))\n\n(def P_test (vec \&quot;-+--\&quot;))\n(def F_test 2)\n(def idx 0)\n(def p_output (one_pancake_flip P_test F_test idx))&quot;, :offset 668, :ns &quot;user&quot;} {:command &quot;(p_output)&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(pprint p_output)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(.indexOf [1 2 3] 3)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(.indexOf [1 2 3] 4)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(= 1 1)&quot;, :offset 7, :ns &quot;user&quot;} {:command &quot;(defn flipping_pancakes\n  [P F flips]\n  (let [idx (.indexOf P \\-)]\n  (if (= idx -1)\n    (str flips)\n    (if (&gt; (+ idx F) (count P))\n      (str \&quot;IMPOSSIBLE\&quot;)\n      (flipping_pancakes (one_pancake_flip P F idx) F (inc flips))))))&quot;, :offset 227, :ns &quot;user&quot;} {:command &quot;(output_data)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(pprint output_data)&quot;, :offset 20, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="test_1" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="test_project" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="f5c9f2b6-a3a5-4a26-919a-873e03779fea" name="Default Changelist" comment="" />
      <created>1552742762793</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1552742762793</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="22" width="1440" height="878" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.15808298" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="0" />
      <window_info anchor="bottom" id="Terminal" order="1" weight="0.32951653" />
      <window_info anchor="bottom" id="Event Log" order="2" sideWeight="0.7070117" side_tool="true" weight="0.32951653" />
      <window_info anchor="bottom" id="Message" order="3" />
      <window_info anchor="bottom" id="Find" order="4" sideWeight="0.49928468" visible="true" weight="0.36386767" />
      <window_info anchor="bottom" id="Run" order="5" sideWeight="0.36133602" weight="0.32951653" />
      <window_info anchor="bottom" id="Debug" order="6" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="7" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="8" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="9" />
      <window_info anchor="bottom" id="REPL" order="10" sideWeight="0.5007153" side_tool="true" visible="true" weight="0.28625953" />
      <window_info anchor="right" id="Palette" order="0" />
      <window_info anchor="right" id="Theme Preview" order="1" />
      <window_info anchor="right" id="Maven" order="2" />
      <window_info anchor="right" id="Leiningen" order="3" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="6" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="7" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="8" weight="0.25" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="180">
          <caret line="12" column="70" lean-forward="true" selection-start-line="12" selection-start-column="70" selection-end-line="12" selection-end-column="70" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.idea/encodings.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="75">
          <caret line="5" column="48" lean-forward="true" selection-start-line="5" selection-start-column="48" selection-end-line="5" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/A-large-practice.in">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-1144" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="30">
          <caret line="2" selection-start-line="2" selection-end-line="7" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/large_output.txt">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret lean-forward="true" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/doc/intro.md">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="6" column="7" selection-start-line="6" selection-start-column="7" selection-end-line="6" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/A-small-practice.in">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-939" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/output.txt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1500">
          <caret line="100" selection-start-line="100" selection-end-line="100" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/blabla.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="311">
          <caret line="24" column="73" selection-start-line="24" selection-start-column="73" selection-end-line="24" selection-end-column="73" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <last-edited>scala-sdk-2.12.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>test_project</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>