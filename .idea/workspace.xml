<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="f5c9f2b6-a3a5-4a26-919a-873e03779fea" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/src/test_project/2019_qual_round_1_A.clj" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test_project/2019_qual_round_2_A.clj" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/test_project/2019_qual_round_3_A.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test_project/blabla.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/test_project/blabla.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test_project/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/test_project/core.clj" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test_project/round_A_1.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/test_project/round_A_1.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/test_project/blabla.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="155">
              <caret line="19" column="16" lean-forward="true" selection-start-line="19" selection-start-column="16" selection-end-line="19" selection-end-column="16" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/test_project/round_A_1.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="276">
              <caret line="55" column="75" selection-start-line="55" selection-start-column="75" selection-end-line="55" selection-end-column="75" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/test_project/2019_qual_round_1_A.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="120">
              <caret line="8" column="33" lean-forward="true" selection-start-line="8" selection-start-column="33" selection-end-line="8" selection-end-column="33" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/test_project/2019_qual_round_2_A.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="150">
              <caret line="10" column="18" lean-forward="true" selection-start-line="10" selection-start-column="18" selection-end-line="10" selection-end-column="18" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/test_project/2019_qual_round_3_A.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="420">
              <caret line="28" column="2" selection-start-line="28" selection-start-column="2" selection-end-line="28" selection-end-column="2" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/test_project/sample.in">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="15">
              <caret line="1" column="1" lean-forward="true" selection-start-line="1" selection-start-column="1" selection-end-line="1" selection-end-column="1" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="75">
              <caret line="5" column="48" lean-forward="true" selection-start-line="5" selection-start-column="48" selection-end-line="5" selection-end-column="48" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/test_project/test_read.clj">
          <provider selected="true" editor-type-id="text-editor" />
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>flipping_pancakes</find>
    </findStrings>
    <replaceStrings>
      <replace>new_flipping_pancakes</replace>
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/clj_test_scripts/blabla.clj" />
        <option value="$PROJECT_DIR$/src/test_project/clj_test_scripts/blabla.clj" />
        <option value="$PROJECT_DIR$/doc/intro.md" />
        <option value="$PROJECT_DIR$/src/test_project/round_A.clj" />
        <option value="$PROJECT_DIR$/src/test_project/core.clj" />
        <option value="$PROJECT_DIR$/src/test_project/blabla.clj" />
        <option value="$PROJECT_DIR$/src/test_project/round_A_1.clj" />
        <option value="$PROJECT_DIR$/src/test_project/test_read.clj" />
        <option value="$PROJECT_DIR$/src/test_project/2019_qual_round_1.clj" />
        <option value="$PROJECT_DIR$/src/test_project/sample.in" />
        <option value="$PROJECT_DIR$/src/test_project/2019_qual_round_1_A.clj" />
        <option value="$PROJECT_DIR$/src/test_project/2019_qual_round_2_A.clj" />
        <option value="$PROJECT_DIR$/src/test_project/2019_qual_round_3_A.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="268" />
    <option name="y" value="22" />
    <option name="width" value="1172" />
    <option name="height" value="878" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="test_project" type="b2602c69:ProjectViewProjectNode" />
              <item name="test_project" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="test_project" type="b2602c69:ProjectViewProjectNode" />
              <item name="test_project" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="test_project" type="b2602c69:ProjectViewProjectNode" />
              <item name="test_project" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="test_project" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1554590131748" />
    <property name="cursive.last.file.extension./Users/maxthone/Documents/Personal/Clojure_projects/test_project/src" value="clj" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/input_files/qual_2017" />
      <recent name="$PROJECT_DIR$/src/test_project" />
    </key>
  </component>
  <component name="ReplState" timestamp="1554592817581">{:repl-history {:ide [], :local [{:command &quot;(defn Walk\n  [vec idx state]\n  (if \n    (vector? vec) \n    (let [is_q (partial = \\?) \n          element (get vec idx)] \n      (if \n        (= idx (count vec)) \n        vec \n        (if \n          ((if \n             (vector? element)\n             (every? is_q element)\n             (is_q element))) \n          (if \n            (= state nil) \n            (let [rest-of-vec (Walk vec (inc idx) state)] \n              (assoc rest-of-vec idx (get rest-of-vec (inc idx)))) \n            (Walk (assoc vec idx state) (inc idx) state)) \n          (Walk (assoc vec idx (Walk element 0 nil)) (inc idx) state)))) \n    (vec)))\n&quot;, :offset 613, :ns &quot;user&quot;} {:command &quot;(Walk [/? /? /N /?])&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(Walk [\\N \\? \\?] 0 nil)&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(\\vector? \\N)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(vector? \\N)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(Walk \&quot;p\&quot; 0 nil)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (if\n    (vector? vec)\n    (let [is_q (partial = \\?)\n          element (get vec idx)]\n      (if\n        (= idx (count vec))\n        vec\n        (if\n          ((if\n             (vector? element)\n             (every? is_q element)\n             (is_q element)))\n          (if\n            (= state nil)\n            (let [rest-of-vec (Walk vec (inc idx) state)]\n              (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n            (Walk (assoc vec idx state) (inc idx) state))\n          (Walk (assoc vec idx (Walk element 0 nil)) (inc idx) state))))\n    vec))&quot;, :offset 594, :ns &quot;user&quot;} {:command &quot;(Walk \\N 0 nil)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(get [\\N] 0)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (if\n    (vector? vec)\n    (let [is_q (partial = \\?)\n          element (get vec idx)\n          vector_flag (vector? element)]\n      (if\n        (= idx (count vec))\n        vec\n        (if\n          (if\n             vector_flag\n             (every? is_q element)\n             (is_q element))\n          (if\n            (= state nil)\n            (let [rest-of-vec (Walk vec (inc idx) state)]\n              (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n            (Walk (assoc vec idx state) (inc idx) state))\n          (Walk (assoc vec idx (Walk element 0 nil)) (inc idx) state))))\n    vec))&quot;, :offset 626, :ns &quot;user&quot;} {:command &quot;(Walk [\\N] 0 nil)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(Walk [\\N \\? \\N] 0 nil)&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(Walk [[\\N \\? \\N] [\\? \\? \\?]] 0 nil)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (if\n    (vector? vec)\n    (let [is_q (partial = \\?)\n          element (get vec idx)\n          vector_flag (vector? element)]\n      (if\n        (= idx (count vec))\n        vec\n        (if\n          (if\n             vector_flag\n             (every? is_q element)\n             (is_q element))\n          (if\n            (= state nil)\n            (let [rest-of-vec (Walk vec (inc idx) state)]\n              (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n            (Walk (assoc vec idx state) (inc idx) state))\n          (Walk (assoc vec idx (Walk element 0 nil)) (inc idx) (Walk element 0 nil)))))\n    vec))&quot;, :offset 641, :ns &quot;user&quot;} {:command &quot;(Walk [[\\N \\? \\N]] 0 nil)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(Walk [[\\N \\? \\N] [\\K \\? \\?]] 0 nil)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (if\n    (vector? vec)\n    (let [is_q (partial = \\?)\n          element (get vec idx)\n          vector_flag (vector? element)]\n      (if\n        (= idx (count vec))\n        vec\n        (if\n          (if\n             vector_flag\n             (every? is_q element)\n             (is_q element))\n          (if\n            (= state nil)\n            (let [rest-of-vec (Walk vec (inc idx) state)]\n              (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n            (Walk (assoc vec idx state) (inc idx) state))\n          (let [replace_element (Walk element 0 nil)]\n            (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n    vec))&quot;, :offset 688, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (Walk (assoc vec idx state) (inc idx) state))\n            (let [replace_element (Walk element 0 nil)]\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n    vec)&quot;, :offset 671, :ns &quot;user&quot;} {:command &quot;(Walk [[\\N \\? \\N] [\\K \\? \\?] [\\? \\? \\?]] 0 nil)&quot;, :offset 47, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (println vec)\n  (println idx)\n  (println state)\n  (println)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (Walk (assoc vec idx state) (inc idx) state))\n            (let [replace_element (Walk element 0 nil)]\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n    vec)&quot;, :offset 733, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (println vec)\n  (println idx)\n  (println state)\n  (println)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (Walk (assoc vec idx state) (inc idx) state))\n            (let [replace_element (Walk element 0 nil)]\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n    vec)\n\n(Walk [[\\N \\? \\N] [\\K \\? \\?] [\\? \\? \\?]] 0 nil)&quot;, :offset 782, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (println vec)\n  (println idx)\n  (println state)\n  (println)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (println 1)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (println 2)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (println 3)\n                (Walk (assoc vec idx state) (inc idx) state))\n            (let [replace_element (Walk element 0 nil)]\n              (println 4)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n      vec)&quot;, :offset 839, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (println vec)\n  (println idx)\n  (println state)\n  (println)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (println 1)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (println 2)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (do (println 3)\n                    (Walk (assoc vec idx state) (inc idx) state)))\n            (let [replace_element (Walk element 0 nil)]\n              (println 4)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n      vec)&quot;, :offset 848, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (println vec)\n  (println idx)\n  (println state)\n  (println)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (println \&quot;aaa\&quot;)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (println \&quot;bbb\&quot;)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (do (println \&quot;ccc\&quot;)\n                    (Walk (assoc vec idx state) (inc idx) state)))\n            (let [replace_element (Walk element 0 nil)]\n              (println \&quot;ddd\&quot;)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n      vec)&quot;, :offset 864, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [vec idx state]\n  (println \&quot;----\&quot;)\n  (println vec)\n  (println idx)\n  (println state)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (println \&quot;aaa\&quot;)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (println \&quot;bbb\&quot;)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (do (println \&quot;ccc\&quot;)\n                    (Walk (assoc vec idx state) (inc idx) state)))\n            (let [replace_element (Walk element 0 nil)]\n              (println \&quot;ddd\&quot;)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n      vec)&quot;, :offset 871, :ns &quot;user&quot;} {:command &quot;(println \&quot;  \&quot;  123)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(defn repeatstr\n  [s n]\n  (apply str (repeat n s)))&quot;, :offset 51, :ns &quot;user&quot;} {:command &quot;(defn iprint\n  [&amp; rest]\n  (apply (repeatstr \&quot;  \&quot; indent) print rest))&quot;, :offset 69, :ns &quot;user&quot;} {:command &quot;(defn iprint\n  [&amp; rest]\n  (apply print (repeatstr \&quot;  \&quot; indent) rest))&quot;, :offset 69, :ns &quot;user&quot;} {:command &quot;(defn iprint\n  [&amp; rest]\n  (apply println (repeatstr \&quot;  \&quot; indent) rest))&quot;, :offset 71, :ns &quot;user&quot;} {:command &quot;(def indent 3)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(iprint \&quot;foo\&quot;)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(def indent 0)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(defn Walk-inner\n  [vec idx state]\n  (println \&quot;----\&quot;)\n  (println vec)\n  (println idx)\n  (println state)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (println \&quot;aaa\&quot;)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (println \&quot;bbb\&quot;)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (do (println \&quot;ccc\&quot;)\n                    (Walk (assoc vec idx state) (inc idx) state)))\n            (let [replace_element (Walk element 0 nil)]\n              (println \&quot;ddd\&quot;)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n      vec)&quot;, :offset 877, :ns &quot;user&quot;} {:command &quot;(defn Walk\n  [&amp; args]\n  (do\n    (let [old-indent indent]\n      (def indent (inc indent))\n      (let [result (apply Walk-inner args)]\n        (def indent old-indent)\n        result))))&quot;, :offset 183, :ns &quot;user&quot;} {:command &quot;(defn iprintln\n  [&amp; rest]\n  (apply println (repeatstr \&quot;  \&quot; indent) rest))&quot;, :offset 73, :ns &quot;user&quot;} {:command &quot;(defn Walk-inner\n  [vec idx state]\n  (iprintln \&quot;----\&quot;)\n  (iprintln vec)\n  (iprintln idx)\n  (iprintln state)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (iprintln \&quot;aaa\&quot;)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (iprintln \&quot;bbb\&quot;)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (do (iprintln \&quot;ccc\&quot;)\n                    (Walk (assoc vec idx state) (inc idx) state)))\n            (let [replace_element (Walk element 0 nil)]\n              (iprintln \&quot;ddd\&quot;)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n      vec)&quot;, :offset 885, :ns &quot;user&quot;} {:command &quot;(defn Walk-inner\n  [vec idx state]\n  (iprintln \&quot;----\&quot;)\n  (iprintln vec)\n  (iprintln idx)\n  (iprintln state)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (iprintln \&quot;aaa\&quot;)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (iprintln \&quot;bbb\&quot;)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (do (iprintln \&quot;ccc\&quot;)\n                    (Walk (assoc vec idx state) (inc idx) state)))\n            (let [replace_element (Walk element 0 nil)]\n              (iprintln \&quot;ddd\&quot;)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element)))))\n  (do (iprintln \&quot;eee\&quot;) vec))&quot;, :offset 903, :ns &quot;user&quot;} {:command &quot;(Walk [\\N \\?] 0 nil)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(Walk [[\\N \\?] [\\? \\L]] 0 nil)&quot;, :offset 30, :ns &quot;user&quot;} {:command &quot;(Walk [[\\N \\? \\K \\?] [\\? \\L \\? \\?]] 0 nil)&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(defn Walk-inner\n  [vec idx state]\n  (iprintln \&quot;----\&quot;)\n  (iprintln vec)\n  (iprintln idx)\n  (iprintln state)\n  (if (and (vector? vec) (&lt; idx (count vec)))\n      (let [is_q (partial = \\?)\n            element (get vec idx)\n            vector_flag (vector? element)\n            has_no_info (if vector_flag (every? is_q element) (is_q element))\n            ]\n        (iprintln \&quot;aaa\&quot;)\n        (if has_no_info\n            (if (= state nil)\n                (let [rest-of-vec (Walk vec (inc idx) state)]\n                  (iprintln \&quot;bbb\&quot;)\n                  (assoc rest-of-vec idx (get rest-of-vec (inc idx))))\n                (do (iprintln \&quot;ccc\&quot;)\n                    (Walk (assoc vec idx state) (inc idx) state)))\n            (let [replace_element (Walk element 0 nil)]\n              (iprintln \&quot;ddd\&quot;)\n              (Walk (assoc vec idx replace_element) (inc idx) replace_element))))\n  (do (iprintln \&quot;eee\&quot;) vec)))&quot;, :offset 903, :ns &quot;user&quot;} {:command &quot;(.indexOf 12331 2)&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(def num-str \&quot;4304660\&quot;)&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(doc .indexOf)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(doc .indexOf num-str \&quot;4\&quot;)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(.indexOf num-str \&quot;4\&quot;)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(repeatstr \&quot;lol\&quot; 4)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(def num-vec [\&quot;4304660\&quot; \&quot;0\&quot;])&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(get num-vec 1)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(+ \&quot;\&quot; \&quot;hello\&quot;)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(str \&quot;\&quot; \&quot;hello\&quot;)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(replace \&quot;43314\&quot; \&quot;4\&quot; \&quot;3\&quot;)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(require '[clojure.string :as str])&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(replace \&quot;43314\&quot; #\&quot;4\&quot; \&quot;3\&quot;)&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(str.replace \&quot;43314\&quot; #\&quot;4\&quot; \&quot;3\&quot;)&quot;, :offset 30, :ns &quot;user&quot;} {:command &quot;(str/replace \&quot;43314\&quot; #\&quot;4\&quot; \&quot;3\&quot;)&quot;, :offset 30, :ns &quot;user&quot;} {:command &quot;(.indexOf \&quot;13443\&quot; \&quot;4\&quot;)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(str/replace-first \&quot;43314\&quot; #\&quot;4\&quot; \&quot;3\&quot;)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(str \&quot;0\&quot; \&quot;1\&quot; )&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(str \&quot;0\&quot; \&quot;1\&quot; \&quot;000\&quot;)&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(int \&quot;1001\&quot;)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(Integer/parseInt \&quot;239303\&quot;)&quot;, :offset 27, :ns &quot;user&quot;} {:command &quot;(str/replace-first \&quot;haha\&quot; #\&quot;4\&quot; \&quot;3\&quot;)&quot;, :offset 35, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (let [A (first num-vec)\n        B (second num-vec)\n        idx4 (.indexOf A \&quot;4\&quot;)]\n  (if (= idx4 -1)\n    [num-vec]\n    ((let [new-A (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;)\n           new-B (+ (- (Integer/parseInt A) (Integer/parseInt new-A)) (Integer/parseInt B))] \n       (get-nums [new-A new-B]))))))&quot;, :offset 321, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (let [A (first num-vec)\n        B (second num-vec)\n        idx4 (.indexOf A \&quot;4\&quot;)]\n  (if (= idx4 -1)\n    [num-vec]\n    ((let [int-new-A (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;)\n           int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n       (get-nums [(str int-new-A) (str int-new-B)]))))))&quot;, :offset 333, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (let [A (first num-vec)\n        B (second num-vec)\n        idx4 (.indexOf A \&quot;4\&quot;)]\n  (if (= idx4 -1)\n    [num-vec]\n    ((let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n           int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n       (get-nums [(str int-new-A) (str int-new-B)]))))))&quot;, :offset 352, :ns &quot;user&quot;} {:command &quot;[4 5]&quot;, :offset 5, :ns &quot;user&quot;} {:command &quot;(vec 4 5) &quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(vec (4 5)) &quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(vec [4 5]) &quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (let [A (first num-vec)\n        B (second num-vec)\n        idx4 (.indexOf A \&quot;4\&quot;)]\n  (if (= idx4 -1)\n    [num-vec]\n    ((let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n           int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n       (get-nums (vec '((str int-new-A) (str int-new-B)))))))))&quot;, :offset 359, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (let [A (first num-vec)\n        B (second num-vec)\n        idx4 (.indexOf A \&quot;4\&quot;)]\n  (if (= idx4 -1)\n    num-vec\n    ((let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n           int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n       (get-nums (vec '((str int-new-A) (str int-new-B)))))))))&quot;, :offset 357, :ns &quot;user&quot;} {:command &quot;(get-nums [\&quot;403134\&quot; \&quot;0\&quot;])&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)  \n    (let [A (first num-vec) \n          B (second num-vec) \n          idx4 (.indexOf A \&quot;4\&quot;)] \n      (if (= idx4 -1) \n        num-vec \n        ((let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;)) \n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))] \n           (get-nums (vec '((str int-new-A) (str int-new-B))))))))))&quot;, :offset 420, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)\n    (let [A (first num-vec)\n          B (second num-vec)\n          idx4 (.indexOf A \&quot;4\&quot;)]\n      (if (= idx4 -1)\n        num-vec\n        ((let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n           (get-nums (vec '((str int-new-A) (str int-new-B))))))))))\n\n\n(get-nums [\&quot;430466\&quot; \&quot;0\&quot;])&quot;, :offset 439, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)\n    (let [A (first num-vec)\n          B (second num-vec)\n          idx4 (.indexOf A \&quot;4\&quot;)]\n      (if (= idx4 -1)\n        num-vec\n        (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n          (do\n            (pprint int-new-A)\n            (get-nums (vec '((str int-new-A) (str int-new-B))))))))))&quot;, :offset 456, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)\n    (let [A (first num-vec)\n          B (second num-vec)\n          idx4 (.indexOf A \&quot;4\&quot;)]\n      (if (= idx4 -1)\n        num-vec\n        (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n          (do\n            (pprint int-new-A)\n            (get-nums (vec '((str int-new-A) (str int-new-B))))))))))\n\n\n\n(get-nums [\&quot;430466\&quot; \&quot;0\&quot;])&quot;, :offset 485, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)\n    (let [A (first num-vec)\n          B (second num-vec)\n          idx4 (.indexOf A \&quot;4\&quot;)]\n      (if (= idx4 -1)\n        num-vec\n        (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n          (do\n            (pprint (str int-new-A))\n            (get-nums (vec '((str int-new-A) (str int-new-B))))))))))\n\n\n\n(get-nums [\&quot;430466\&quot; \&quot;0\&quot;])&quot;, :offset 491, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)\n    (let [A (first num-vec)\n          B (second num-vec)\n          idx4 (.indexOf A \&quot;4\&quot;)]\n      (if (= idx4 -1)\n        num-vec\n        (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n          (do\n            (pprint (str int-new-A))\n            (get-nums [str int-new-A str int-new-B])))))))\n\n\n\n(get-nums [\&quot;430466\&quot; \&quot;0\&quot;])&quot;, :offset 480, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)\n    (let [A (first num-vec)\n          B (second num-vec)\n          idx4 (.indexOf A \&quot;4\&quot;)]\n      (if (= idx4 -1)\n        num-vec\n        (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n          (do\n            (pprint (str int-new-A))\n            (get-nums [(str int-new-A) (str int-new-B)])))))))&quot;, :offset 455, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec]\n  (do\n    (pprint num-vec)\n    (let [A (first num-vec)\n          B (second num-vec)\n          idx4 (.indexOf A \&quot;4\&quot;)]\n      (if (= idx4 -1)\n        num-vec\n        (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;))\n               int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))]\n          (do\n            (pprint (str int-new-A))\n            (get-nums [(str int-new-A) (str int-new-B)])))))))\n\n\n\n(get-nums [\&quot;430466\&quot; \&quot;0\&quot;])&quot;, :offset 484, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec] \n  (let [A (first num-vec) \n        B (second num-vec) \n        idx4 (.indexOf A \&quot;4\&quot;)] \n    (if (= idx4 -1) \n      num-vec \n      (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;)) \n            int-new-B (+ (- (Integer/parseInt A) int-new-A) (Integer/parseInt B))] \n            (get-nums [(str int-new-A) (str int-new-B)])))))\n\n\n\n(get-nums [\&quot;430466\&quot; \&quot;0\&quot;])&quot;, :offset 397, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec] \n  (let [A (first num-vec) \n        B (second num-vec) \n        idx4 (.indexOf A \&quot;4\&quot;)] \n    (if (= idx4 -1) \n      num-vec \n      (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;)) \n            int-new-B (+ (- (Integer/parseInt A) int-new-A) B)] \n            (get-nums [(str int-new-A) int-new-B])))))\n\n\n\n(get-nums [\&quot;430466\&quot; 0])&quot;, :offset 370, :ns &quot;user&quot;} {:command &quot;(defn get-nums\n  [num-vec] \n  (let [A (first num-vec) \n        B (second num-vec) \n        idx4 (.indexOf A \&quot;4\&quot;)] \n    (if (= idx4 -1) \n      [(Integer/parseInt A) B] \n      (let [int-new-A (Integer/parseInt (str/replace-first A #\&quot;4\&quot; \&quot;3\&quot;)) \n            int-new-B (+ (- (Integer/parseInt A) int-new-A) B)] \n            (get-nums [(str int-new-A) int-new-B])))))\n\n\n\n(get-nums [\&quot;430466\&quot; 0])&quot;, :offset 387, :ns &quot;user&quot;} {:command &quot;(defn get-new-nums\n  [num]\n  (let [int-num (Integer/parseInt num)\n        new-num (Integer/parseInt (str/replace num #\&quot;4\&quot; \&quot;3\&quot;))])\n  [new-num (-int-num new-num)])&quot;, :offset 161, :ns &quot;user&quot;} {:command &quot;(defn get-new-nums\n  [num]\n  (let [int-num (Integer/parseInt num)\n        new-num (Integer/parseInt (str/replace num #\&quot;4\&quot; \&quot;3\&quot;))]\n  [new-num (- int-num new-num)]))&quot;, :offset 162, :ns &quot;user&quot;} {:command &quot;(defn get-new-nums\n  [num]\n  (let [int-num (Integer/parseInt num)\n        new-num (Integer/parseInt (str/replace num #\&quot;4\&quot; \&quot;3\&quot;))]\n  [new-num (- int-num new-num)]))\n\n(get-new-nums [\&quot;430466\&quot; 0])&quot;, :offset 191, :ns &quot;user&quot;} {:command &quot;(defn get-new-nums\n  [num]\n  (let [int-num (Integer/parseInt num)\n        new-num (Integer/parseInt (str/replace num #\&quot;4\&quot; \&quot;3\&quot;))]\n  [new-num (- int-num new-num)]))\n\n(get-new-nums \&quot;430466\&quot;)&quot;, :offset 187, :ns &quot;user&quot;} {:command &quot;(doc read-line)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(*in*)&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(*in* 1)&quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(defn flip\n  [x]\n  (if (= \&quot;E\&quot; x) \&quot;S\&quot; \&quot;E\&quot;))\n\n\n(map flip \&quot;EESSEEE\&quot;)&quot;, :offset 65, :ns &quot;user&quot;} {:command &quot;(defn flip\n  [x]\n  (do\n    (pprint (x))\n    (if (= \&quot;E\&quot; x) \&quot;S\&quot; \&quot;E\&quot;)))\n\n\n(map flip \&quot;EESSEEE\&quot;)&quot;, :offset 91, :ns &quot;user&quot;} {:command &quot;(defn flip\n  [x]\n  (do\n    (pprint x)\n    (if (= \&quot;E\&quot; x) \&quot;S\&quot; \&quot;E\&quot;)))\n\n\n(map flip \&quot;EESSEEE\&quot;)\n&quot;, :offset 90, :ns &quot;user&quot;} {:command &quot;(defn flip\n  [x]\n  (do\n    (pprint x)\n    (if (= \\E x) \\S \\E)))\n\n\n(map flip \&quot;EESSEEE\&quot;)&quot;, :offset 86, :ns &quot;user&quot;} {:command &quot;(defn flip\n  [x]\n  (do\n    (pprint x)\n    (if (= \\E x) \\S \\E)))\n\n\n(str (map flip \&quot;EESSEEE\&quot;))&quot;, :offset 92, :ns &quot;user&quot;} {:command &quot;(defn flip\n  [x]\n  (do\n    (pprint x)\n    (if (= \\E x) \\S \\E)))\n\n\n(apply str (map flip \&quot;EESSEEE\&quot;))&quot;, :offset 98, :ns &quot;user&quot;} {:command &quot;(= 1891/31)&quot;, :offset 11, :ns &quot;test-project.2019-qual-round-3-A&quot;} {:command &quot;878767876567896545676545678765456789765456787654567887656789765456789098765456787654345678987654345678909876543456789087654&quot;, :offset 123, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="test_1" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="test_project" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="f5c9f2b6-a3a5-4a26-919a-873e03779fea" name="Default Changelist" comment="" />
      <created>1552742762793</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1552742762793</updated>
    </task>
    <servers />
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="470" y="22" width="1172" height="878" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.12123894" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="0" />
      <window_info anchor="bottom" id="Terminal" order="1" weight="0.32951653" />
      <window_info anchor="bottom" id="Event Log" order="2" sideWeight="0.66548675" side_tool="true" weight="0.32951653" />
      <window_info anchor="bottom" id="Message" order="3" />
      <window_info anchor="bottom" id="Find" order="4" sideWeight="0.49928468" weight="0.36386767" />
      <window_info anchor="bottom" id="Run" order="5" sideWeight="0.12831858" weight="0.32951653" />
      <window_info anchor="bottom" id="Debug" order="6" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="7" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="8" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="9" />
      <window_info active="true" anchor="bottom" id="REPL" order="10" sideWeight="0.8716814" side_tool="true" visible="true" weight="0.34987277" />
      <window_info anchor="right" id="Palette" order="0" />
      <window_info anchor="right" id="Theme Preview" order="1" />
      <window_info anchor="right" id="Maven" order="2" />
      <window_info anchor="right" id="Leiningen" order="3" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="6" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="7" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="8" weight="0.25" />
    </layout>
    <layout-to-restore>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.3493841" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="0" />
      <window_info anchor="bottom" id="Terminal" order="1" weight="0.32951653" />
      <window_info anchor="bottom" id="Event Log" order="2" sideWeight="0.7070117" side_tool="true" weight="0.32872927" />
      <window_info anchor="bottom" id="Message" order="3" />
      <window_info anchor="bottom" id="Find" order="4" sideWeight="0.49928468" weight="0.36386767" />
      <window_info anchor="bottom" id="Run" order="5" sideWeight="0.35897437" weight="0.32951653" />
      <window_info anchor="bottom" id="Debug" order="6" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="7" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="8" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="9" />
      <window_info anchor="bottom" id="REPL" order="10" sideWeight="0.64102566" side_tool="true" visible="true" weight="0.34987277" />
      <window_info anchor="right" id="Palette" order="0" />
      <window_info anchor="right" id="Theme Preview" order="1" />
      <window_info anchor="right" id="Maven" order="2" />
      <window_info anchor="right" id="Leiningen" order="3" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="right" id="Palette&#9;" order="5" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="6" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="7" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="8" weight="0.25" />
    </layout-to-restore>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="180">
          <caret line="12" column="70" lean-forward="true" selection-start-line="12" selection-start-column="70" selection-end-line="12" selection-end-column="70" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.idea/encodings.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/qual_2017/A-large-practice.in">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-1144" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/doc/intro.md">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="6" column="7" selection-start-line="6" selection-start-column="7" selection-end-line="6" selection-end-column="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/qual_2017/large_output.txt">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/qual_2017/output.txt">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1500">
          <caret line="100" selection-start-line="100" selection-end-line="100" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/input_files/qual_2017/A-small-practice.in">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/round_A.clj" />
    <entry file="file://$PROJECT_DIR$/output.txt">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="22" lean-forward="true" selection-start-column="22" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="75">
          <caret line="5" column="48" lean-forward="true" selection-start-line="5" selection-start-column="48" selection-end-line="5" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/test_read.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/blabla.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="155">
          <caret line="19" column="16" lean-forward="true" selection-start-line="19" selection-start-column="16" selection-end-line="19" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/round_A_1.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="276">
          <caret line="55" column="75" selection-start-line="55" selection-start-column="75" selection-end-line="55" selection-end-column="75" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/sample.in">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="15">
          <caret line="1" column="1" lean-forward="true" selection-start-line="1" selection-start-column="1" selection-end-line="1" selection-end-column="1" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/2019_qual_round_1_A.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="120">
          <caret line="8" column="33" lean-forward="true" selection-start-line="8" selection-start-column="33" selection-end-line="8" selection-end-column="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/2019_qual_round_2_A.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="150">
          <caret line="10" column="18" lean-forward="true" selection-start-line="10" selection-start-column="18" selection-end-line="10" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/test_project/2019_qual_round_3_A.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="420">
          <caret line="28" column="2" selection-start-line="28" selection-start-column="2" selection-end-line="28" selection-end-column="2" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <last-edited>scala-sdk-2.12.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>test_project</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>